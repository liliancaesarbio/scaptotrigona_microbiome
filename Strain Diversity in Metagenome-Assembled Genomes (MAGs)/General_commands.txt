#### HERE YOU WILL FIND AN OVERVIEW OF COMMANDS USED, INCLUDING FOR PLOTS. CUSTUM SCRIPTS ARE IN INDIVIDUAL FILES IN THIS SAME FOLDER. 

## 28 shotgun metagenome samples
(SBBP1_FOOD SBBP1_FORAGER SBBP1_GUARD SBBP1_HONEY SBBP1_LARVAE SBBP1_NURSE SBBP1_POLLEN)
(SBBP2_FOOD SBBP2_FORAGER SBBP2_GUARD SBBP2_HONEY SBBP2_LARVAE SBBP2_NURSE SBBP4_POLLEN)
(SDBP2_HONEY SDBP3_FOOD SDBP3_FORAGER SDBP3_GUARD SDBP3_LARVAE SDBP3_NURSE SDBP3_POLLEN)
(SDBP4_FOOD SDBP4_FORAGER SDBP4_GUARD SDBP4_HONEY SDBP4_LARVAE SDBP4_NURSE SDBP4_POLLEN)


## Strain profiles per sample
sample=(SBBP1_FOOD SBBP1_FORAGER SBBP1_GUARD SBBP1_HONEY SBBP1_LARVAE SBBP1_NURSE SBBP1_POLLEN SBBP2_FOOD SBBP2_FORAGER SBBP2_GUARD SBBP2_HONEY SBBP2_LARVAE SBBP2_NURSE SBBP4_POLLEN SDBP2_HONEY SDBP3_FOOD SDBP3_FORAGER SDBP3_GUARD SDBP3_LARVAE SDBP3_NURSE SDBP3_POLLEN SDBP4_FOOD SDBP4_FORAGER SDBP4_GUARD SDBP4_HONEY SDBP4_LARVAE SDBP4_NURSE SDBP4_POLLEN)

for sample in ${sample[*]}; do
	inStrain profile /path/${sample}_sorted.bam /path/all__bins.fasta -o outputbinsprofile.IS -p 24 -s contigtobin.stb --database_mode
done


## Compare strain profiles between samples
inStrain compare -i outputSBBP1_FOOD.IS outputSBBP1_FORAGER.IS outputSBBP1_GUARD.IS outputSBBP1_HONEY.IS outputSBBP1_NURSE.IS outputSBBP1_POLLEN.IS outputSBBP2_FOOD.IS outputSBBP2_FORAGER.IS outputSBBP2_GUARD.IS outputSBBP2_HONEY.IS outputSBBP2_NURSE.IS outputSBBP4_POLLEN.IS outputSDBP2_HONEY.IS outputSDBP3_FOOD.IS outputSDBP3_FORAGER.IS outputSDBP3_GUARD.IS outputSDBP3_NURSE.IS outputSDBP3_POLLEN.IS outputSDBP4_FOOD.IS outputSDBP4_FORAGER.IS outputSDBP4_GUARD.IS outputSDBP4_HONEY.IS outputSDBP4_NURSE.IS outputSDBP4_POLLEN.IS -o genomefile.IS.COMPARE2 -p 24 -s contigtobin.stb --database_mode


## Calculate strain diversity ################################################### ADD INPUT
# profile for each sample
for i in *genome_info.tsv; do awk -F'\t' -v OFS='\t' '
BEGIN { print "genome", "breadth", "length", "nucl_diversity", "SNVs_count", "calculated_value", "file_name" }
NR > 1 {
    calculated_value = ($25 / ($5 * $3)) * 100;
    print $1, $3, $5, $13, $25, calculated_value, FILENAME;
}' ${i} > ${i}_strains.tsv; done

# put all in a single file
cat *strains.tsv > strains_persampe.tsv











## Figures
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(reshape2)

setwd("/Users/lcaesar/Documents/Newton Lab 2024/Scapto manuscript 2024/FINAL_FIGURES_DATA/Fig2")

# Read the CSV file
data <- read.csv("coverage_bins_persamples.csv")

# Order the 'type' column as a factor with specified levels
data$type <- factor(data$type, levels = c("POLLEN", "HONEY", "FOOD", "LARVAE", "NURSE", "FORAGER", "GUARD"))
data <- data %>% arrange(type, sample)  # Arrange data by 'type' and 'sample'

# Reshape the data for heatmap plotting
data_melt <- melt(data, id.vars = c("sample", "bin_taxa"), measure.vars = "proportions")

# Make sure 'sample' is a factor with the desired order
data_melt$sample <- factor(data_melt$sample, levels = unique(data$sample))

# Sort the 'bin_taxa' factor in reverse alphabetical order (Z-A) for the y-axis
data_melt$bin_taxa <- factor(data_melt$bin_taxa, levels = rev(sort(unique(data$bin_taxa))))

# Plot the heatmap
ggplot(data_melt, aes(x = sample, y = bin_taxa, fill = value)) +
  geom_tile() +
  scale_fill_gradient(low = "white", high = "black") +
  labs(x = "Sample", y = "Bin Taxa", fill = "Mean Coverage") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

ggsave("MAGsproportions.pdf", width = 15, height = 10, units = "cm", limitsize = FALSE)

dev.off()
dev.off()




#### STRAINS
library(ggplot2)

# Read your CSV file
data <- read.csv("strains_persampe.csv")

data$type <- factor(data$type, levels=c("pollen", "honey", "food", "larvae", "nurse", "forager", "guard"))

data$genome <- factor(data$genome, levels=c("Wolbachia pipientis", "Raoutella sp.", "Bombilactobacillus sp.2", "Bombilactobacillus sp.1", "Bifidobacterium sp.", "Apilactobacillus sp.3", "Apilactobacillus sp.2", "Apilactobacillus sp.1", "Acinetobacter sp."))
                      
# Plot
ggplot(data, aes(x = calculated_value, y = genome)) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(aes(color = type), position = position_jitter(width = 0.3, height = 0), size = 3) +
  labs(x = "Percentage of SNVs", y = "Genome", fill = "Sample type", color = "Sample type") +
  theme_classic() +
  scale_color_manual(values = c("#226160", "#a95f4d", "#d0a465", "#c1cfbb", "#8571b8", "#CC99BC"))

# Save the plot
ggsave("percentageSNV.pdf", width = 15, height = 15, units = "cm", limitsize = FALSE)

dev.off()







#sharing
("/Users/lcaesar/Documents/Newton Lab 2024/Scapto manuscript 2024/FINAL_FIGURES_DATA/Fig2")

# Load necessary library
library(ggplot2)

# Create your data frame
# Create your data frame
data <- data.frame(
  sharing_events = c(21, 10, 10, 3, 1),
  MAG = c(
    "Apilactobacillus sp.2", "Apilactobacillus sp.1", 
    "Apilactobacillus sp.3", "Raoultella sp.", 
    "Acinetobacter sp."
  )
)

# Convert MAG to a factor with the desired order
data$MAG <- factor(data$MAG, levels = data$MAG)

# Plot barplot with flipped axes, without color
ggplot(data, aes(x = MAG, y = sharing_events)) +  # Removed fill = MAG
  geom_bar(stat = "identity", color = "black", fill = "gray") +  # Optional: customize bar outline and fill color
  labs(
    title = "Number of Sharing Events by MAG",
    x = "MAG",
    y = "Number of Sharing Events"
  ) +
  theme_classic()

ggsave("SharingeventsSNV.pdf", width = 10, height = 10, units = "cm", limitsize = FALSE)

dev.off()
dev.off()





### network
# Load necessary libraries
library(igraph)

data <- read.table(header = TRUE, text = "
genome sample1 sample2 shared
bins_SBBP2_HONEY.8.fa SBBP1_HONEY_sorted.bam SBBP1_POLLEN_sorted.bam 1
bins_SBBP2_HONEY.8.fa SBBP1_HONEY_sorted.bam SBBP2_HONEY_sorted.bam 1
bins_SBBP2_HONEY.8.fa SBBP1_FOOD_sorted.bam SBBP1_HONEY_sorted.bam 1
bins_SBBP2_HONEY.8.fa SBBP2_FOOD_sorted.bam SBBP2_HONEY_sorted.bam 1
bins_SBBP2_HONEY.8.fa SBBP2_FOOD_sorted.bam SDBP2_HONEY_sorted.bam 1
bins_SBBP2_HONEY.8.fa SBBP1_FOOD_sorted.bam SBBP2_FOOD_sorted.bam 1
bins_SBBP2_HONEY.8.fa SBBP1_FOOD_sorted.bam SBBP2_HONEY_sorted.bam 1
bins_SBBP2_HONEY.8.fa SBBP1_FOOD_sorted.bam SDBP4_HONEY_sorted.bam 1
bins_SBBP2_HONEY.8.fa SBBP1_FOOD_sorted.bam SDBP2_HONEY_sorted.bam 1
bins_SBBP2_HONEY.8.fa SBBP1_POLLEN_sorted.bam SBBP2_FOOD_sorted.bam 1
bins_SBBP2_HONEY.8.fa SBBP1_FOOD_sorted.bam SBBP1_POLLEN_sorted.bam 1
bins_SBBP2_HONEY.8.fa SBBP1_HONEY_sorted.bam SDBP4_HONEY_sorted.bam 1
bins_SBBP2_HONEY.8.fa SBBP1_POLLEN_sorted.bam SBBP2_HONEY_sorted.bam 1
bins_SBBP2_HONEY.8.fa SBBP1_HONEY_sorted.bam SBBP2_FOOD_sorted.bam 1
bins_SBBP2_HONEY.8.fa SBBP1_POLLEN_sorted.bam SDBP2_HONEY_sorted.bam 1
bins_SBBP2_HONEY.8.fa SBBP1_HONEY_sorted.bam SDBP2_HONEY_sorted.bam 1
bins_SBBP2_HONEY.8.fa SBBP1_POLLEN_sorted.bam SDBP4_HONEY_sorted.bam 1
bins_SBBP2_HONEY.8.fa SDBP2_HONEY_sorted.bam SDBP4_HONEY_sorted.bam 1
bins_SBBP2_HONEY.8.fa SBBP2_HONEY_sorted.bam SDBP4_HONEY_sorted.bam 1
bins_SBBP2_HONEY.8.fa SBBP2_HONEY_sorted.bam SDBP2_HONEY_sorted.bam 1
bins_SBBP2_HONEY.8.fa SBBP2_FOOD_sorted.bam SDBP4_HONEY_sorted.bam 1
")

# Filter data for shared genomes
filtered_data <- subset(data, shared == 1)

# Create graph object
g <- graph_from_data_frame(filtered_data[, c("sample1", "sample2")], directed = FALSE)

# Calculate node degree (number of connections)
V(g)$size <- degree(g) * 3  # Scale the size of nodes based on their degree

# Save the plot as a PDF
pdf("pathogen_network2.pdf", width = 15, height = 7)  # Open PDF device

# Plot the network with Kamada-Kawai layout and node sizes based on degree
plot(
  g,
  vertex.label = V(g)$name,  # Label vertices with sample names
  vertex.size = 3,   # Adjust node size based on degree
  vertex.color = "orange",   # Node color
  edge.color = "black",      # Edge color
  edge.width = 1.5,          # Edge thickness
  layout = layout_with_kk,   # Kamada-Kawai layout
  vertex.label.dist = 2      # Move labels outside of the vertices
)

dev.off()